%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 202 575 589
%%Creator: yExport 1.1
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Saturday, December 18, 2010 4:27:10 PM GMT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
895 622 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
895.000 0.00000 l
895.000 622.000 l
0.00000 622.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 895 622 rc
q
[ 2.64681 0.00000 0.00000 2.64681 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -256.000 -164.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
256.000 164.000 m
595.000 164.000 l
595.000 399.000 l
256.000 399.000 l
256.000 164.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 2.64681 0.00000 0.00000 2.64681 -677.583 -434.077 ] defaultmatrix matrix concatmatrix setmatrix
[ 2.64681 0.00000 0.00000 2.64681 -677.583 -434.077 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 2.64681 0.00000 0.00000 2.64681 -677.583 -434.077 ] defaultmatrix matrix concatmatrix setmatrix
1.60000 M
10.0000 M
newpath
433.114 193.921 m
433.114 185.249 l
435.989 185.249 l
436.854 185.249 437.549 185.345 438.075 185.538  c
438.601 185.731 439.057 186.056 439.442 186.515  c
440.057 187.233 440.364 188.187 440.364 189.374  c
440.364 190.822 439.984 191.942 439.224 192.733  c
438.463 193.525 437.390 193.921 436.005 193.921  c
433.114 193.921 l
h
434.333 192.999 m
435.911 192.999 l
437.036 192.999 437.833 192.697 438.302 192.093  c
438.812 191.447 439.067 190.582 439.067 189.499  c
439.067 188.478 438.817 187.676 438.317 187.093  c
438.015 186.739 437.656 186.496 437.239 186.366  c
436.823 186.236 436.192 186.171 435.349 186.171  c
434.333 186.171 l
434.333 192.999 l
h
445.415 193.108 m
444.728 193.744 444.061 194.062 443.415 194.062  c
442.884 194.062 442.446 193.897 442.103 193.569  c
441.759 193.241 441.587 192.827 441.587 192.327  c
441.587 191.629 441.879 191.093 442.462 190.718  c
443.045 190.343 443.879 190.155 444.962 190.155  c
445.243 190.155 l
445.243 189.390 l
445.243 188.650 444.863 188.280 444.103 188.280  c
443.498 188.280 442.842 188.468 442.134 188.843  c
442.134 187.890 l
442.915 187.577 443.644 187.421 444.321 187.421  c
445.030 187.421 445.553 187.580 445.892 187.897  c
446.230 188.215 446.399 188.713 446.399 189.390  c
446.399 192.280 l
446.399 192.937 446.603 193.265 447.009 193.265  c
447.061 193.265 447.134 193.254 447.228 193.233  c
447.306 193.874 l
447.045 193.999 446.759 194.062 446.446 194.062  c
445.905 194.062 445.561 193.744 445.415 193.108  c
h
445.243 192.483 m
445.243 190.843 l
444.853 190.827 l
444.228 190.827 443.720 190.947 443.329 191.187  c
442.938 191.426 442.743 191.744 442.743 192.140  c
442.743 192.410 442.840 192.642 443.032 192.835  c
443.225 193.028 443.462 193.124 443.743 193.124  c
444.222 193.124 444.722 192.910 445.243 192.483  c
h
450.667 194.062 m
450.084 194.062 449.628 193.895 449.300 193.562  c
448.972 193.228 448.808 192.759 448.808 192.155  c
448.808 188.421 l
448.011 188.421 l
448.011 187.562 l
448.808 187.562 l
448.808 186.405 l
449.964 186.296 l
449.964 187.562 l
451.620 187.562 l
451.620 188.421 l
449.964 188.421 l
449.964 191.952 l
449.964 192.785 450.323 193.202 451.042 193.202  c
451.188 193.202 451.370 193.176 451.589 193.124  c
451.589 193.921 l
451.235 194.015 450.927 194.062 450.667 194.062  c
h
456.530 193.108 m
455.843 193.744 455.176 194.062 454.530 194.062  c
453.999 194.062 453.562 193.897 453.218 193.569  c
452.874 193.241 452.702 192.827 452.702 192.327  c
452.702 191.629 452.994 191.093 453.577 190.718  c
454.160 190.343 454.994 190.155 456.077 190.155  c
456.358 190.155 l
456.358 189.390 l
456.358 188.650 455.978 188.280 455.218 188.280  c
454.614 188.280 453.957 188.468 453.249 188.843  c
453.249 187.890 l
454.030 187.577 454.759 187.421 455.437 187.421  c
456.145 187.421 456.668 187.580 457.007 187.897  c
457.345 188.215 457.515 188.713 457.515 189.390  c
457.515 192.280 l
457.515 192.937 457.718 193.265 458.124 193.265  c
458.176 193.265 458.249 193.254 458.343 193.233  c
458.421 193.874 l
458.160 193.999 457.874 194.062 457.562 194.062  c
457.020 194.062 456.676 193.744 456.530 193.108  c
h
456.358 192.483 m
456.358 190.843 l
455.968 190.827 l
455.343 190.827 454.835 190.947 454.444 191.187  c
454.054 191.426 453.858 191.744 453.858 192.140  c
453.858 192.410 453.955 192.642 454.147 192.835  c
454.340 193.028 454.577 193.124 454.858 193.124  c
455.338 193.124 455.838 192.910 456.358 192.483  c
h
461.563 194.062 m
461.032 194.062 460.392 193.942 459.642 193.702  c
459.642 192.640 l
460.392 193.015 461.048 193.202 461.610 193.202  c
461.944 193.202 462.220 193.111 462.438 192.929  c
462.657 192.746 462.767 192.520 462.767 192.249  c
462.767 191.864 462.459 191.541 461.845 191.280  c
461.173 190.983 l
460.173 190.577 459.673 189.983 459.673 189.202  c
459.673 188.650 459.871 188.215 460.267 187.897  c
460.662 187.580 461.199 187.421 461.876 187.421  c
462.230 187.421 462.673 187.468 463.204 187.562  c
463.438 187.608 l
463.438 188.577 l
462.793 188.379 462.282 188.280 461.907 188.280  c
461.157 188.280 460.782 188.551 460.782 189.093  c
460.782 189.437 461.063 189.728 461.626 189.968  c
462.188 190.202 l
462.813 190.473 463.259 190.754 463.524 191.046  c
463.790 191.338 463.923 191.707 463.923 192.155  c
463.923 192.707 463.701 193.163 463.259 193.522  c
462.816 193.882 462.251 194.062 461.563 194.062  c
h
470.649 193.718 m
469.879 193.947 469.217 194.062 468.665 194.062  c
467.728 194.062 466.965 193.752 466.376 193.132  c
465.787 192.512 465.493 191.702 465.493 190.702  c
465.493 189.744 465.754 188.955 466.274 188.335  c
466.795 187.715 467.462 187.405 468.274 187.405  c
469.045 187.405 469.639 187.679 470.056 188.226  c
470.472 188.772 470.681 189.551 470.681 190.562  c
470.681 190.921 l
466.665 190.921 l
466.832 192.431 467.571 193.187 468.884 193.187  c
469.363 193.187 469.951 193.056 470.649 192.796  c
470.649 193.718 l
h
466.712 190.046 m
469.524 190.046 l
469.524 188.869 469.082 188.280 468.196 188.280  c
467.311 188.280 466.816 188.869 466.712 190.046  c
h
474.585 194.062 m
474.002 194.062 473.546 193.895 473.218 193.562  c
472.890 193.228 472.726 192.759 472.726 192.155  c
472.726 188.421 l
471.929 188.421 l
471.929 187.562 l
472.726 187.562 l
472.726 186.405 l
473.882 186.296 l
473.882 187.562 l
475.538 187.562 l
475.538 188.421 l
473.882 188.421 l
473.882 191.952 l
473.882 192.785 474.241 193.202 474.960 193.202  c
475.106 193.202 475.288 193.176 475.507 193.124  c
475.507 193.921 l
475.153 194.015 474.845 194.062 474.585 194.062  c
h
f
0 J
1.45000 M
newpath
486.000 189.500 m
486.000 197.508 471.673 204.000 454.000 204.000  c
436.327 204.000 422.000 197.508 422.000 189.500  c
422.000 181.492 436.327 175.000 454.000 175.000  c
471.673 175.000 486.000 181.492 486.000 189.500  c
h
S
2 J
10.0000 M
1.60000 M
10.0000 M
newpath
404.792 252.921 m
404.792 244.249 l
409.636 244.249 l
409.636 245.171 l
406.011 245.171 l
406.011 247.952 l
409.042 247.952 l
409.042 248.858 l
406.011 248.858 l
406.011 251.999 l
409.886 251.999 l
409.886 252.921 l
404.792 252.921 l
h
411.327 252.921 m
411.327 246.562 l
412.483 246.562 l
412.483 247.749 l
413.088 246.864 413.832 246.421 414.718 246.421  c
415.270 246.421 415.710 246.595 416.038 246.944  c
416.366 247.293 416.530 247.759 416.530 248.343  c
416.530 252.921 l
415.374 252.921 l
415.374 248.718 l
415.374 248.249 415.304 247.913 415.163 247.710  c
415.022 247.507 414.796 247.405 414.483 247.405  c
413.775 247.405 413.108 247.869 412.483 248.796  c
412.483 252.921 l
411.327 252.921 l
h
420.681 253.062 m
420.097 253.062 419.642 252.895 419.313 252.562  c
418.985 252.228 418.821 251.759 418.821 251.155  c
418.821 247.421 l
418.024 247.421 l
418.024 246.562 l
418.821 246.562 l
418.821 245.405 l
419.978 245.296 l
419.978 246.562 l
421.634 246.562 l
421.634 247.421 l
419.978 247.421 l
419.978 250.952 l
419.978 251.785 420.337 252.202 421.056 252.202  c
421.201 252.202 421.384 252.176 421.603 252.124  c
421.603 252.921 l
421.248 253.015 420.941 253.062 420.681 253.062  c
h
423.263 252.921 m
423.263 246.562 l
424.419 246.562 l
424.419 252.921 l
423.263 252.921 l
h
423.263 245.405 m
423.263 244.249 l
424.419 244.249 l
424.419 245.405 l
423.263 245.405 l
h
428.638 253.062 m
428.054 253.062 427.599 252.895 427.271 252.562  c
426.942 252.228 426.778 251.759 426.778 251.155  c
426.778 247.421 l
425.981 247.421 l
425.981 246.562 l
426.778 246.562 l
426.778 245.405 l
427.935 245.296 l
427.935 246.562 l
429.591 246.562 l
429.591 247.421 l
427.935 247.421 l
427.935 250.952 l
427.935 251.785 428.294 252.202 429.013 252.202  c
429.159 252.202 429.341 252.176 429.560 252.124  c
429.560 252.921 l
429.205 253.015 428.898 253.062 428.638 253.062  c
h
431.595 255.233 m
432.626 252.921 l
430.157 246.562 l
431.407 246.562 l
433.235 251.343 l
435.173 246.562 l
436.267 246.562 l
432.782 255.233 l
431.595 255.233 l
h
f
0 J
1.45000 M
newpath
452.000 248.500 m
452.000 256.508 437.673 263.000 420.000 263.000  c
402.327 263.000 388.000 256.508 388.000 248.500  c
388.000 240.492 402.327 234.000 420.000 234.000  c
437.673 234.000 452.000 240.492 452.000 248.500  c
h
S
2 J
10.0000 M
1.60000 M
10.0000 M
newpath
494.792 252.921 m
494.792 244.249 l
499.636 244.249 l
499.636 245.171 l
496.011 245.171 l
496.011 247.952 l
499.042 247.952 l
499.042 248.858 l
496.011 248.858 l
496.011 251.999 l
499.886 251.999 l
499.886 252.921 l
494.792 252.921 l
h
501.327 252.921 m
501.327 246.562 l
502.483 246.562 l
502.483 247.749 l
503.088 246.864 503.832 246.421 504.718 246.421  c
505.270 246.421 505.710 246.595 506.038 246.944  c
506.366 247.293 506.530 247.759 506.530 248.343  c
506.530 252.921 l
505.374 252.921 l
505.374 248.718 l
505.374 248.249 505.304 247.913 505.163 247.710  c
505.022 247.507 504.796 247.405 504.483 247.405  c
503.775 247.405 503.108 247.869 502.483 248.796  c
502.483 252.921 l
501.327 252.921 l
h
510.681 253.062 m
510.097 253.062 509.642 252.895 509.313 252.562  c
508.985 252.228 508.821 251.759 508.821 251.155  c
508.821 247.421 l
508.024 247.421 l
508.024 246.562 l
508.821 246.562 l
508.821 245.405 l
509.978 245.296 l
509.978 246.562 l
511.634 246.562 l
511.634 247.421 l
509.978 247.421 l
509.978 250.952 l
509.978 251.785 510.337 252.202 511.056 252.202  c
511.201 252.202 511.384 252.176 511.603 252.124  c
511.603 252.921 l
511.248 253.015 510.941 253.062 510.681 253.062  c
h
513.263 252.921 m
513.263 246.562 l
514.419 246.562 l
514.419 252.921 l
513.263 252.921 l
h
513.263 245.405 m
513.263 244.249 l
514.419 244.249 l
514.419 245.405 l
513.263 245.405 l
h
518.638 253.062 m
518.054 253.062 517.599 252.895 517.271 252.562  c
516.942 252.228 516.778 251.759 516.778 251.155  c
516.778 247.421 l
515.981 247.421 l
515.981 246.562 l
516.778 246.562 l
516.778 245.405 l
517.935 245.296 l
517.935 246.562 l
519.591 246.562 l
519.591 247.421 l
517.935 247.421 l
517.935 250.952 l
517.935 251.785 518.294 252.202 519.013 252.202  c
519.159 252.202 519.341 252.176 519.560 252.124  c
519.560 252.921 l
519.205 253.015 518.898 253.062 518.638 253.062  c
h
521.595 255.233 m
522.626 252.921 l
520.157 246.562 l
521.407 246.562 l
523.235 251.343 l
525.173 246.562 l
526.267 246.562 l
522.782 255.233 l
521.595 255.233 l
h
f
0 J
1.45000 M
newpath
542.000 248.500 m
542.000 256.508 527.673 263.000 510.000 263.000  c
492.327 263.000 478.000 256.508 478.000 248.500  c
478.000 240.492 492.327 234.000 510.000 234.000  c
527.673 234.000 542.000 240.492 542.000 248.500  c
h
S
2 J
10.0000 M
1.60000 M
10.0000 M
newpath
359.611 309.608 m
358.127 305.858 l
356.658 309.608 l
359.611 309.608 l
h
360.908 312.921 m
359.971 310.515 l
356.299 310.515 l
355.346 312.921 l
354.189 312.921 l
357.643 304.249 l
358.861 304.249 l
362.236 312.921 l
360.908 312.921 l
h
365.438 313.062 m
364.854 313.062 364.398 312.895 364.070 312.562  c
363.742 312.228 363.578 311.759 363.578 311.155  c
363.578 307.421 l
362.781 307.421 l
362.781 306.562 l
363.578 306.562 l
363.578 305.405 l
364.734 305.296 l
364.734 306.562 l
366.391 306.562 l
366.391 307.421 l
364.734 307.421 l
364.734 310.952 l
364.734 311.785 365.094 312.202 365.812 312.202  c
365.958 312.202 366.141 312.176 366.359 312.124  c
366.359 312.921 l
366.005 313.015 365.698 313.062 365.438 313.062  c
h
369.926 313.062 m
369.342 313.062 368.887 312.895 368.559 312.562  c
368.230 312.228 368.066 311.759 368.066 311.155  c
368.066 307.421 l
367.270 307.421 l
367.270 306.562 l
368.066 306.562 l
368.066 305.405 l
369.223 305.296 l
369.223 306.562 l
370.879 306.562 l
370.879 307.421 l
369.223 307.421 l
369.223 310.952 l
369.223 311.785 369.582 312.202 370.301 312.202  c
370.447 312.202 370.629 312.176 370.848 312.124  c
370.848 312.921 l
370.493 313.015 370.186 313.062 369.926 313.062  c
h
372.508 312.921 m
372.508 306.562 l
373.664 306.562 l
373.664 307.749 l
374.122 306.864 374.784 306.421 375.648 306.421  c
375.773 306.421 375.898 306.431 376.023 306.452  c
376.023 307.530 l
375.826 307.457 375.648 307.421 375.492 307.421  c
374.763 307.421 374.154 307.853 373.664 308.718  c
373.664 312.921 l
372.508 312.921 l
h
377.418 312.921 m
377.418 306.562 l
378.574 306.562 l
378.574 312.921 l
377.418 312.921 l
h
377.418 305.405 m
377.418 304.249 l
378.574 304.249 l
378.574 305.405 l
377.418 305.405 l
h
380.887 312.999 m
380.887 303.671 l
382.043 303.671 l
382.043 307.749 l
382.512 306.864 383.220 306.421 384.168 306.421  c
384.928 306.421 385.530 306.700 385.973 307.257  c
386.415 307.814 386.637 308.577 386.637 309.546  c
386.637 310.598 386.387 311.447 385.887 312.093  c
385.387 312.739 384.730 313.062 383.918 313.062  c
383.168 313.062 382.543 312.775 382.043 312.202  c
381.902 312.999 l
380.887 312.999 l
h
382.043 311.405 m
382.637 311.937 383.204 312.202 383.746 312.202  c
384.850 312.202 385.402 311.353 385.402 309.655  c
385.402 308.166 384.913 307.421 383.934 307.421  c
383.288 307.421 382.658 307.770 382.043 308.468  c
382.043 311.405 l
h
392.424 312.921 m
392.424 311.718 l
391.809 312.614 391.064 313.062 390.189 313.062  c
389.627 313.062 389.182 312.887 388.854 312.538  c
388.525 312.189 388.361 311.718 388.361 311.124  c
388.361 306.562 l
389.518 306.562 l
389.518 310.749 l
389.518 311.228 389.588 311.569 389.729 311.772  c
389.869 311.976 390.101 312.077 390.424 312.077  c
391.132 312.077 391.799 311.614 392.424 310.687  c
392.424 306.562 l
393.564 306.562 l
393.564 312.921 l
392.424 312.921 l
h
397.793 313.062 m
397.210 313.062 396.754 312.895 396.426 312.562  c
396.098 312.228 395.934 311.759 395.934 311.155  c
395.934 307.421 l
395.137 307.421 l
395.137 306.562 l
395.934 306.562 l
395.934 305.405 l
397.090 305.296 l
397.090 306.562 l
398.746 306.562 l
398.746 307.421 l
397.090 307.421 l
397.090 310.952 l
397.090 311.785 397.449 312.202 398.168 312.202  c
398.314 312.202 398.496 312.176 398.715 312.124  c
398.715 312.921 l
398.361 313.015 398.053 313.062 397.793 313.062  c
h
405.031 312.718 m
404.260 312.947 403.599 313.062 403.047 313.062  c
402.109 313.062 401.346 312.752 400.758 312.132  c
400.169 311.512 399.875 310.702 399.875 309.702  c
399.875 308.744 400.135 307.955 400.656 307.335  c
401.177 306.715 401.844 306.405 402.656 306.405  c
403.427 306.405 404.021 306.679 404.438 307.226  c
404.854 307.772 405.062 308.551 405.062 309.562  c
405.062 309.921 l
401.047 309.921 l
401.214 311.431 401.953 312.187 403.266 312.187  c
403.745 312.187 404.333 312.056 405.031 311.796  c
405.031 312.718 l
h
401.094 309.046 m
403.906 309.046 l
403.906 307.869 403.464 307.280 402.578 307.280  c
401.693 307.280 401.198 307.869 401.094 309.046  c
h
f
0 J
1.45000 M
newpath
412.000 308.500 m
412.000 316.508 397.673 323.000 380.000 323.000  c
362.327 323.000 348.000 316.508 348.000 308.500  c
348.000 300.492 362.327 294.000 380.000 294.000  c
397.673 294.000 412.000 300.492 412.000 308.500  c
h
S
2 J
10.0000 M
1.60000 M
10.0000 M
newpath
463.611 309.608 m
462.127 305.858 l
460.658 309.608 l
463.611 309.608 l
h
464.908 312.921 m
463.971 310.515 l
460.299 310.515 l
459.346 312.921 l
458.189 312.921 l
461.643 304.249 l
462.861 304.249 l
466.236 312.921 l
464.908 312.921 l
h
469.438 313.062 m
468.854 313.062 468.398 312.895 468.070 312.562  c
467.742 312.228 467.578 311.759 467.578 311.155  c
467.578 307.421 l
466.781 307.421 l
466.781 306.562 l
467.578 306.562 l
467.578 305.405 l
468.734 305.296 l
468.734 306.562 l
470.391 306.562 l
470.391 307.421 l
468.734 307.421 l
468.734 310.952 l
468.734 311.785 469.094 312.202 469.812 312.202  c
469.958 312.202 470.141 312.176 470.359 312.124  c
470.359 312.921 l
470.005 313.015 469.698 313.062 469.438 313.062  c
h
473.926 313.062 m
473.342 313.062 472.887 312.895 472.559 312.562  c
472.230 312.228 472.066 311.759 472.066 311.155  c
472.066 307.421 l
471.270 307.421 l
471.270 306.562 l
472.066 306.562 l
472.066 305.405 l
473.223 305.296 l
473.223 306.562 l
474.879 306.562 l
474.879 307.421 l
473.223 307.421 l
473.223 310.952 l
473.223 311.785 473.582 312.202 474.301 312.202  c
474.447 312.202 474.629 312.176 474.848 312.124  c
474.848 312.921 l
474.493 313.015 474.186 313.062 473.926 313.062  c
h
476.508 312.921 m
476.508 306.562 l
477.664 306.562 l
477.664 307.749 l
478.122 306.864 478.784 306.421 479.648 306.421  c
479.773 306.421 479.898 306.431 480.023 306.452  c
480.023 307.530 l
479.826 307.457 479.648 307.421 479.492 307.421  c
478.763 307.421 478.154 307.853 477.664 308.718  c
477.664 312.921 l
476.508 312.921 l
h
481.418 312.921 m
481.418 306.562 l
482.574 306.562 l
482.574 312.921 l
481.418 312.921 l
h
481.418 305.405 m
481.418 304.249 l
482.574 304.249 l
482.574 305.405 l
481.418 305.405 l
h
484.887 312.999 m
484.887 303.671 l
486.043 303.671 l
486.043 307.749 l
486.512 306.864 487.220 306.421 488.168 306.421  c
488.928 306.421 489.530 306.700 489.973 307.257  c
490.415 307.814 490.637 308.577 490.637 309.546  c
490.637 310.598 490.387 311.447 489.887 312.093  c
489.387 312.739 488.730 313.062 487.918 313.062  c
487.168 313.062 486.543 312.775 486.043 312.202  c
485.902 312.999 l
484.887 312.999 l
h
486.043 311.405 m
486.637 311.937 487.204 312.202 487.746 312.202  c
488.850 312.202 489.402 311.353 489.402 309.655  c
489.402 308.166 488.913 307.421 487.934 307.421  c
487.288 307.421 486.658 307.770 486.043 308.468  c
486.043 311.405 l
h
496.424 312.921 m
496.424 311.718 l
495.809 312.614 495.064 313.062 494.189 313.062  c
493.627 313.062 493.182 312.887 492.854 312.538  c
492.525 312.189 492.361 311.718 492.361 311.124  c
492.361 306.562 l
493.518 306.562 l
493.518 310.749 l
493.518 311.228 493.588 311.569 493.729 311.772  c
493.869 311.976 494.101 312.077 494.424 312.077  c
495.132 312.077 495.799 311.614 496.424 310.687  c
496.424 306.562 l
497.564 306.562 l
497.564 312.921 l
496.424 312.921 l
h
501.793 313.062 m
501.210 313.062 500.754 312.895 500.426 312.562  c
500.098 312.228 499.934 311.759 499.934 311.155  c
499.934 307.421 l
499.137 307.421 l
499.137 306.562 l
499.934 306.562 l
499.934 305.405 l
501.090 305.296 l
501.090 306.562 l
502.746 306.562 l
502.746 307.421 l
501.090 307.421 l
501.090 310.952 l
501.090 311.785 501.449 312.202 502.168 312.202  c
502.314 312.202 502.496 312.176 502.715 312.124  c
502.715 312.921 l
502.361 313.015 502.053 313.062 501.793 313.062  c
h
509.031 312.718 m
508.260 312.947 507.599 313.062 507.047 313.062  c
506.109 313.062 505.346 312.752 504.758 312.132  c
504.169 311.512 503.875 310.702 503.875 309.702  c
503.875 308.744 504.135 307.955 504.656 307.335  c
505.177 306.715 505.844 306.405 506.656 306.405  c
507.427 306.405 508.021 306.679 508.438 307.226  c
508.854 307.772 509.062 308.551 509.062 309.562  c
509.062 309.921 l
505.047 309.921 l
505.214 311.431 505.953 312.187 507.266 312.187  c
507.745 312.187 508.333 312.056 509.031 311.796  c
509.031 312.718 l
h
505.094 309.046 m
507.906 309.046 l
507.906 307.869 507.464 307.280 506.578 307.280  c
505.693 307.280 505.198 307.869 505.094 309.046  c
h
f
0 J
1.45000 M
newpath
516.000 308.500 m
516.000 316.508 501.673 323.000 484.000 323.000  c
466.327 323.000 452.000 316.508 452.000 308.500  c
452.000 300.492 466.327 294.000 484.000 294.000  c
501.673 294.000 516.000 300.492 516.000 308.500  c
h
S
2 J
10.0000 M
1.60000 M
10.0000 M
newpath
325.611 368.608 m
324.127 364.858 l
322.658 368.608 l
325.611 368.608 l
h
326.908 371.921 m
325.971 369.515 l
322.299 369.515 l
321.346 371.921 l
320.189 371.921 l
323.643 363.249 l
324.861 363.249 l
328.236 371.921 l
326.908 371.921 l
h
331.438 372.062 m
330.854 372.062 330.398 371.895 330.070 371.562  c
329.742 371.228 329.578 370.759 329.578 370.155  c
329.578 366.421 l
328.781 366.421 l
328.781 365.562 l
329.578 365.562 l
329.578 364.405 l
330.734 364.296 l
330.734 365.562 l
332.391 365.562 l
332.391 366.421 l
330.734 366.421 l
330.734 369.952 l
330.734 370.785 331.094 371.202 331.812 371.202  c
331.958 371.202 332.141 371.176 332.359 371.124  c
332.359 371.921 l
332.005 372.015 331.698 372.062 331.438 372.062  c
h
335.926 372.062 m
335.342 372.062 334.887 371.895 334.559 371.562  c
334.230 371.228 334.066 370.759 334.066 370.155  c
334.066 366.421 l
333.270 366.421 l
333.270 365.562 l
334.066 365.562 l
334.066 364.405 l
335.223 364.296 l
335.223 365.562 l
336.879 365.562 l
336.879 366.421 l
335.223 366.421 l
335.223 369.952 l
335.223 370.785 335.582 371.202 336.301 371.202  c
336.447 371.202 336.629 371.176 336.848 371.124  c
336.848 371.921 l
336.493 372.015 336.186 372.062 335.926 372.062  c
h
338.508 371.921 m
338.508 365.562 l
339.664 365.562 l
339.664 366.749 l
340.122 365.864 340.784 365.421 341.648 365.421  c
341.773 365.421 341.898 365.431 342.023 365.452  c
342.023 366.530 l
341.826 366.457 341.648 366.421 341.492 366.421  c
340.763 366.421 340.154 366.853 339.664 367.718  c
339.664 371.921 l
338.508 371.921 l
h
343.418 371.921 m
343.418 365.562 l
344.574 365.562 l
344.574 371.921 l
343.418 371.921 l
h
343.418 364.405 m
343.418 363.249 l
344.574 363.249 l
344.574 364.405 l
343.418 364.405 l
h
346.887 371.999 m
346.887 362.671 l
348.043 362.671 l
348.043 366.749 l
348.512 365.864 349.220 365.421 350.168 365.421  c
350.928 365.421 351.530 365.700 351.973 366.257  c
352.415 366.814 352.637 367.577 352.637 368.546  c
352.637 369.598 352.387 370.447 351.887 371.093  c
351.387 371.739 350.730 372.062 349.918 372.062  c
349.168 372.062 348.543 371.775 348.043 371.202  c
347.902 371.999 l
346.887 371.999 l
h
348.043 370.405 m
348.637 370.937 349.204 371.202 349.746 371.202  c
350.850 371.202 351.402 370.353 351.402 368.655  c
351.402 367.166 350.913 366.421 349.934 366.421  c
349.288 366.421 348.658 366.770 348.043 367.468  c
348.043 370.405 l
h
358.424 371.921 m
358.424 370.718 l
357.809 371.614 357.064 372.062 356.189 372.062  c
355.627 372.062 355.182 371.887 354.854 371.538  c
354.525 371.189 354.361 370.718 354.361 370.124  c
354.361 365.562 l
355.518 365.562 l
355.518 369.749 l
355.518 370.228 355.588 370.569 355.729 370.772  c
355.869 370.976 356.101 371.077 356.424 371.077  c
357.132 371.077 357.799 370.614 358.424 369.687  c
358.424 365.562 l
359.564 365.562 l
359.564 371.921 l
358.424 371.921 l
h
363.793 372.062 m
363.210 372.062 362.754 371.895 362.426 371.562  c
362.098 371.228 361.934 370.759 361.934 370.155  c
361.934 366.421 l
361.137 366.421 l
361.137 365.562 l
361.934 365.562 l
361.934 364.405 l
363.090 364.296 l
363.090 365.562 l
364.746 365.562 l
364.746 366.421 l
363.090 366.421 l
363.090 369.952 l
363.090 370.785 363.449 371.202 364.168 371.202  c
364.314 371.202 364.496 371.176 364.715 371.124  c
364.715 371.921 l
364.361 372.015 364.053 372.062 363.793 372.062  c
h
371.031 371.718 m
370.260 371.947 369.599 372.062 369.047 372.062  c
368.109 372.062 367.346 371.752 366.758 371.132  c
366.169 370.512 365.875 369.702 365.875 368.702  c
365.875 367.744 366.135 366.955 366.656 366.335  c
367.177 365.715 367.844 365.405 368.656 365.405  c
369.427 365.405 370.021 365.679 370.438 366.226  c
370.854 366.772 371.062 367.551 371.062 368.562  c
371.062 368.921 l
367.047 368.921 l
367.214 370.431 367.953 371.187 369.266 371.187  c
369.745 371.187 370.333 371.056 371.031 370.796  c
371.031 371.718 l
h
367.094 368.046 m
369.906 368.046 l
369.906 366.869 369.464 366.280 368.578 366.280  c
367.693 366.280 367.198 366.869 367.094 368.046  c
h
f
0 J
1.45000 M
newpath
378.000 367.500 m
378.000 375.508 363.673 382.000 346.000 382.000  c
328.327 382.000 314.000 375.508 314.000 367.500  c
314.000 359.492 328.327 353.000 346.000 353.000  c
363.673 353.000 378.000 359.492 378.000 367.500  c
h
S
2 J
10.0000 M
1.60000 M
10.0000 M
newpath
429.611 368.608 m
428.127 364.858 l
426.658 368.608 l
429.611 368.608 l
h
430.908 371.921 m
429.971 369.515 l
426.299 369.515 l
425.346 371.921 l
424.189 371.921 l
427.643 363.249 l
428.861 363.249 l
432.236 371.921 l
430.908 371.921 l
h
435.438 372.062 m
434.854 372.062 434.398 371.895 434.070 371.562  c
433.742 371.228 433.578 370.759 433.578 370.155  c
433.578 366.421 l
432.781 366.421 l
432.781 365.562 l
433.578 365.562 l
433.578 364.405 l
434.734 364.296 l
434.734 365.562 l
436.391 365.562 l
436.391 366.421 l
434.734 366.421 l
434.734 369.952 l
434.734 370.785 435.094 371.202 435.812 371.202  c
435.958 371.202 436.141 371.176 436.359 371.124  c
436.359 371.921 l
436.005 372.015 435.698 372.062 435.438 372.062  c
h
439.926 372.062 m
439.342 372.062 438.887 371.895 438.559 371.562  c
438.230 371.228 438.066 370.759 438.066 370.155  c
438.066 366.421 l
437.270 366.421 l
437.270 365.562 l
438.066 365.562 l
438.066 364.405 l
439.223 364.296 l
439.223 365.562 l
440.879 365.562 l
440.879 366.421 l
439.223 366.421 l
439.223 369.952 l
439.223 370.785 439.582 371.202 440.301 371.202  c
440.447 371.202 440.629 371.176 440.848 371.124  c
440.848 371.921 l
440.493 372.015 440.186 372.062 439.926 372.062  c
h
442.508 371.921 m
442.508 365.562 l
443.664 365.562 l
443.664 366.749 l
444.122 365.864 444.784 365.421 445.648 365.421  c
445.773 365.421 445.898 365.431 446.023 365.452  c
446.023 366.530 l
445.826 366.457 445.648 366.421 445.492 366.421  c
444.763 366.421 444.154 366.853 443.664 367.718  c
443.664 371.921 l
442.508 371.921 l
h
447.418 371.921 m
447.418 365.562 l
448.574 365.562 l
448.574 371.921 l
447.418 371.921 l
h
447.418 364.405 m
447.418 363.249 l
448.574 363.249 l
448.574 364.405 l
447.418 364.405 l
h
450.887 371.999 m
450.887 362.671 l
452.043 362.671 l
452.043 366.749 l
452.512 365.864 453.220 365.421 454.168 365.421  c
454.928 365.421 455.530 365.700 455.973 366.257  c
456.415 366.814 456.637 367.577 456.637 368.546  c
456.637 369.598 456.387 370.447 455.887 371.093  c
455.387 371.739 454.730 372.062 453.918 372.062  c
453.168 372.062 452.543 371.775 452.043 371.202  c
451.902 371.999 l
450.887 371.999 l
h
452.043 370.405 m
452.637 370.937 453.204 371.202 453.746 371.202  c
454.850 371.202 455.402 370.353 455.402 368.655  c
455.402 367.166 454.913 366.421 453.934 366.421  c
453.288 366.421 452.658 366.770 452.043 367.468  c
452.043 370.405 l
h
462.424 371.921 m
462.424 370.718 l
461.809 371.614 461.064 372.062 460.189 372.062  c
459.627 372.062 459.182 371.887 458.854 371.538  c
458.525 371.189 458.361 370.718 458.361 370.124  c
458.361 365.562 l
459.518 365.562 l
459.518 369.749 l
459.518 370.228 459.588 370.569 459.729 370.772  c
459.869 370.976 460.101 371.077 460.424 371.077  c
461.132 371.077 461.799 370.614 462.424 369.687  c
462.424 365.562 l
463.564 365.562 l
463.564 371.921 l
462.424 371.921 l
h
467.793 372.062 m
467.210 372.062 466.754 371.895 466.426 371.562  c
466.098 371.228 465.934 370.759 465.934 370.155  c
465.934 366.421 l
465.137 366.421 l
465.137 365.562 l
465.934 365.562 l
465.934 364.405 l
467.090 364.296 l
467.090 365.562 l
468.746 365.562 l
468.746 366.421 l
467.090 366.421 l
467.090 369.952 l
467.090 370.785 467.449 371.202 468.168 371.202  c
468.314 371.202 468.496 371.176 468.715 371.124  c
468.715 371.921 l
468.361 372.015 468.053 372.062 467.793 372.062  c
h
475.031 371.718 m
474.260 371.947 473.599 372.062 473.047 372.062  c
472.109 372.062 471.346 371.752 470.758 371.132  c
470.169 370.512 469.875 369.702 469.875 368.702  c
469.875 367.744 470.135 366.955 470.656 366.335  c
471.177 365.715 471.844 365.405 472.656 365.405  c
473.427 365.405 474.021 365.679 474.438 366.226  c
474.854 366.772 475.062 367.551 475.062 368.562  c
475.062 368.921 l
471.047 368.921 l
471.214 370.431 471.953 371.187 473.266 371.187  c
473.745 371.187 474.333 371.056 475.031 370.796  c
475.031 371.718 l
h
471.094 368.046 m
473.906 368.046 l
473.906 366.869 473.464 366.280 472.578 366.280  c
471.693 366.280 471.198 366.869 471.094 368.046  c
h
f
0 J
1.45000 M
newpath
482.000 367.500 m
482.000 375.508 467.673 382.000 450.000 382.000  c
432.327 382.000 418.000 375.508 418.000 367.500  c
418.000 359.492 432.327 353.000 450.000 353.000  c
467.673 353.000 482.000 359.492 482.000 367.500  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
470.668 201.882 m
495.793 228.361 l
495.848 228.444 l
S
newpath
500.272 235.110 m
497.802 222.347 l
495.295 227.611 l
489.470 227.877 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
446.440 203.589 m
432.307 227.596 l
S
newpath
428.248 234.490 m
438.645 226.686 l
432.814 226.734 l
430.027 221.612 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
406.908 261.735 m
389.883 287.296 l
389.845 287.389 l
S
newpath
386.771 294.775 m
395.998 285.617 l
390.229 286.466 l
386.765 281.775 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
372.746 322.622 m
358.438 346.629 l
S
newpath
354.343 353.501 m
364.781 345.753 l
358.950 345.770 l
356.191 340.634 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
396.084 321.035 m
429.048 349.443 l
S
newpath
435.108 354.666 m
429.282 343.045 l
428.290 348.791 l
422.753 350.620 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
437.952 260.503 m
455.306 274.974 l
468.380 288.658 l
468.441 288.738 l
S
newpath
473.306 295.088 m
469.977 282.521 l
467.833 287.944 l
462.039 288.604 l
h
f
2 J
10.0000 M
2.00000 w
1 J
1.45000 M
[ 0.00000 8.00000 ] 2.00000 d
newpath
452.000 248.500 m
478.000 248.500 l
S
1.00000 w
2 J
10.0000 M
[ ] 0.00000 d
2.00000 w
1 J
1.45000 M
[ 0.00000 8.00000 ] 2.00000 d
newpath
412.000 308.500 m
452.000 308.500 l
S
1.00000 w
2 J
10.0000 M
[ ] 0.00000 d
2.00000 w
1 J
1.45000 M
[ 0.00000 8.00000 ] 2.00000 d
newpath
378.000 367.500 m
418.000 367.500 l
S
1.00000 w
2 J
10.0000 M
[ ] 0.00000 d
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
